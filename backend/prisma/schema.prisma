// This is your Prisma schema file for a freelancing platform
// Prisma schema for a freelancing platform

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // You can change to mysql, sqlite, sqlserver, etc.
  url      = env("DATABASE_URL")
}

// User Model
model User {
  id                String              @id @default(cuid())
  username          String              @unique
  email             String              @unique
  password          String
  role              UserRole            @default(BUYER)
  firstName         String?
  lastName          String?
  profileImage      String?             @default("default-avatar.png")
  country           String?
  city              String?
  phone             String?
  bio               String?             @db.Text
  skills            Skill[]             @relation("UserSkills")
  languages         UserLanguage[]
  education         Education[]
  website           String?
  github            String?
  twitter           String?
  linkedin          String?
  instagram         String?
  
  // Seller specific fields
  sellerTitle       String?
  sellerDescription String?             @db.Text
  completedOrders   Int                 @default(0)
  totalEarnings     Float               @default(0)
  availableForHire  Boolean             @default(true)
  isVerified        Boolean             @default(false)
  memberSince       DateTime            @default(now())
  responseTime      Int                 @default(24) // hours
  
  // Account status
  walletBalance     Float               @default(0)
  pendingAmount     Float               @default(0)
  accountStatus     AccountStatus       @default(ACTIVE)
  emailVerified     Boolean             @default(false)
  lastLogin         DateTime?
  
  // Relationships - User as seller
  gigsCreated       Gig[]               @relation("SellerGigs")
  sellerOrders      Order[]             @relation("SellerOrders")
  sellerReviews     Review[]            @relation("ReceivedReviews")
  
  // Relationships - User as buyer
  buyerOrders       Order[]             @relation("BuyerOrders")
  reviewsGiven      Review[]            @relation("GivenReviews")
  savedGigs         Gig[]               @relation("SavedGigs")
  
  // Communication
  sentMessages      Message[]           @relation("SentMessages")
  receivedMessages  Message[]           @relation("ReceivedMessages")
  conversations     ConversationParticipant[]
  notifications     Notification[]
  
  // Financial
  transactions      Transaction[]
  
  // Reporting
  reportsSubmitted  Report[]            @relation("ReportSubmitter")
  reportsResolved   Report[]            @relation("ReportResolver")
  
  // Helpful votes on reviews
  helpfulVotes      HelpfulVote[]
  
  // Authentication
  refreshTokens     RefreshToken[]
  
  // Admin
  reportedContent   Report[]            @relation("ReportedUser")
  
  // Timestamps
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  @@index([username])
  @@index([email])
  @@index([role])
}

// User role enum
enum UserRole {
  BUYER
  SELLER
  ADMIN
}

// Account status enum
enum AccountStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  DELETED
}

// User language proficiency model
model UserLanguage {
  id          String      @id @default(cuid())
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  language    String
  proficiency Proficiency
  
  @@unique([userId, language])
}

// Language proficiency enum
enum Proficiency {
  BASIC
  CONVERSATIONAL
  FLUENT
  NATIVE
}

// Education model
model Education {
  id           String    @id @default(cuid())
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  institution  String
  degree       String?
  fieldOfStudy String?
  from         DateTime
  to           DateTime?
  current      Boolean   @default(false)
  description  String?   @db.Text
}

// Category Model
model Category {
  id            String     @id @default(cuid())
  name          String     @unique
  slug          String     @unique
  description   String?    @db.Text
  icon          String?
  parentId      String?
  parent        Category?  @relation("SubCategories", fields: [parentId], references: [id])
  subCategories Category[] @relation("SubCategories")
  gigs          Gig[]
  skills        Skill[]
  isActive      Boolean    @default(true)
  order         Int        @default(0)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@index([slug])
}

// Skill Model
model Skill {
  id         String    @id @default(cuid())
  name       String    @unique
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?
  isVerified Boolean   @default(true)
  users      User[]    @relation("UserSkills")
  createdAt  DateTime  @default(now())

  @@index([name])
}

// Gig Model
model Gig {
  id             String      @id @default(cuid())
  title          String
  slug           String      @unique
  seller         User        @relation("SellerGigs", fields: [sellerId], references: [id])
  sellerId       String
  category       Category    @relation(fields: [categoryId], references: [id])
  categoryId     String
  subCategoryId  String?
  description    String      @db.Text
  tags           String[]
  views          Int         @default(0)
  clicks         Int         @default(0)
  orderCount     Int         @default(0)
  favoriteCount  Int         @default(0)
  averageRating  Float       @default(0)
  ratingCount    Int         @default(0)
  status         GigStatus   @default(ACTIVE)
  featured       Boolean     @default(false)
  
  // Relationships
  orders         Order[]
  reviews        Review[]
  savedBy        User[]      @relation("SavedGigs")
  conversations  Conversation[]
  reports        Report[]    @relation("ReportedGig")
  
  // Media
  images         GigImage[]
  video          String?

  // Packages
  packages       Package[]

  // FAQs
  faqs           FAQ[]
  
  // Requirements before ordering
  requirements   String[]
  
  // Timestamps
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@index([sellerId])
  @@index([categoryId])
  @@index([status])
  @@index([title])
  @@index([title, description])
}

// Gig status enum
enum GigStatus {
  ACTIVE
  PAUSED
  PENDING
  REJECTED
  DELETED
}

// Gig Image Model
model GigImage {
  id      String @id @default(cuid())
  gig     Gig    @relation(fields: [gigId], references: [id], onDelete: Cascade)
  gigId   String
  url     String
  order   Int    @default(0)

  @@index([gigId])
}

// FAQ Model
model FAQ {
  id       String @id @default(cuid())
  gig      Gig    @relation(fields: [gigId], references: [id], onDelete: Cascade)
  gigId    String
  question String
  answer   String @db.Text

  @@index([gigId])
}

// Package Model (for tiered pricing)
model Package {
  id           String        @id @default(cuid())
  gig          Gig           @relation(fields: [gigId], references: [id], onDelete: Cascade)
  gigId        String
  packageType  PackageType
  title        String
  description  String        @db.Text
  deliveryTime Int           // days
  revisions    Int           @default(1)
  price        Float
  features     String[]
  orders       Order[]

  @@unique([gigId, packageType])
}

// Package type enum
enum PackageType {
  BASIC
  STANDARD
  PREMIUM
}

// Order Model
model Order {
  id                  String         @id @default(cuid())
  orderNumber         String         @unique
  buyer               User           @relation("BuyerOrders", fields: [buyerId], references: [id])
  buyerId             String
  seller              User           @relation("SellerOrders", fields: [sellerId], references: [id])
  sellerId            String
  gig                 Gig            @relation(fields: [gigId], references: [id])
  gigId               String
  package             Package        @relation(fields: [packageId], references: [id])
  packageId           String
  quantity            Int            @default(1)
  requirements        String?        @db.Text
  price               Float
  status              OrderStatus    @default(PENDING)
  
  // Timeline dates
  orderedAt           DateTime       @default(now())
  startedAt           DateTime?
  deliveredAt         DateTime?
  completedAt         DateTime?
  cancelledAt         DateTime?
  deliveryTime        Int            // days
  expectedDeliveryDate DateTime?
  
  // Relationships
  deliverables        Deliverable[]
  revisions           Revision[]
  review              Review?
  conversation        Conversation?  @relation(fields: [conversationId], references: [id])
  conversationId      String?
  transactions        Transaction[]
  dispute             Dispute?
  
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt

  @@index([buyerId])
  @@index([sellerId])
  @@index([gigId])
  @@index([status])
  @@index([orderNumber])
}

// Order status enum
enum OrderStatus {
  PENDING
  IN_PROGRESS
  DELIVERED
  REVISION
  COMPLETED
  CANCELLED
  DISPUTED
}

// Deliverable Model
model Deliverable {
  id          String   @id @default(cuid())
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId     String
  description String   @db.Text
  fileUrl     String
  submittedAt DateTime @default(now())

  @@index([orderId])
}

// Revision Model
model Revision {
  id             String   @id @default(cuid())
  order          Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId        String
  requestDetails String   @db.Text
  attachments    String[]
  requestedAt    DateTime @default(now())
  responseDetails String?  @db.Text
  responseAttachments String[]
  respondedAt    DateTime?

  @@index([orderId])
}

// Dispute Model
model Dispute {
  id          String       @id @default(cuid())
  order       Order        @relation(fields: [orderId], references: [id])
  orderId     String       @unique
  reason      String
  description String       @db.Text
  openedAt    DateTime     @default(now())
  resolvedAt  DateTime?
  resolution  String?      @db.Text
  status      DisputeStatus @default(PENDING)

  @@index([status])
}

// Dispute status enum
enum DisputeStatus {
  PENDING
  INVESTIGATING
  RESOLVED
  CLOSED
}

// Review Model
model Review {
  id           String      @id @default(cuid())
  order        Order       @relation(fields: [orderId], references: [id])
  orderId      String      @unique
  reviewer     User        @relation("GivenReviews", fields: [reviewerId], references: [id])
  reviewerId   String
  reviewee     User        @relation("ReceivedReviews", fields: [revieweeId], references: [id])
  revieweeId   String
  gig          Gig         @relation(fields: [gigId], references: [id])
  gigId        String
  rating       Float
  title        String?
  content      String      @db.Text
  
  // Specific ratings
  communication Float?
  serviceAsDescribed Float?
  buyAgain     Boolean?
  
  // Media
  images       String[]
  
  // Response
  response     String?     @db.Text
  respondedAt  DateTime?
  
  // Helpful votes
  helpfulVotes HelpfulVote[]
  
  // Status
  isVerified   Boolean     @default(true)
  status       ReviewStatus @default(ACTIVE)
  reports      Report[]    @relation("ReportedReview")
  
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([reviewerId])
  @@index([revieweeId])
  @@index([gigId])
  @@index([rating])
}

// Review status enum
enum ReviewStatus {
  ACTIVE
  HIDDEN
  FLAGGED
  REMOVED
}

// Helpful Vote Model
model HelpfulVote {
  id       String  @id @default(cuid())
  review   Review  @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId String
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String

  @@unique([reviewId, userId])
}

// Conversation Model
model Conversation {
  id           String   @id @default(cuid())
  participants ConversationParticipant[]
  messages     Message[]
  gig          Gig?     @relation(fields: [gigId], references: [id])
  gigId        String?
  orders       Order[]
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// Conversation Participant Model
model ConversationParticipant {
  id             String       @id @default(cuid())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  unreadCount    Int          @default(0)

  @@unique([conversationId, userId])
}

// Message Model
model Message {
  id             String       @id @default(cuid())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  sender         User         @relation("SentMessages", fields: [senderId], references: [id])
  senderId       String
  receiver       User         @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId     String
  content        String       @db.Text
  attachments    MessageAttachment[]
  readAt         DateTime?
  deletedBySender Boolean     @default(false)
  deletedByReceiver Boolean   @default(false)
  type           MessageType  @default(TEXT)
  
  // For offer messages
  offerGigId     String?
  offerPackage   String?
  offerPrice     Float?
  offerDescription String?    @db.Text
  offerExpiresAt DateTime?
  offerStatus    OfferStatus?
  
  reports        Report[]     @relation("ReportedMessage")
  createdAt      DateTime     @default(now())

  @@index([conversationId])
  @@index([senderId])
  @@index([receiverId])
}

// Message type enum
enum MessageType {
  TEXT
  OFFER
  ORDER
  SYSTEM
}

// Offer status enum
enum OfferStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

// Message Attachment Model
model MessageAttachment {
  id        String  @id @default(cuid())
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String
  filename  String
  fileType  String
  url       String
  size      Int

  @@index([messageId])
}

// Transaction Model
model Transaction {
  id              String           @id @default(cuid())
  user            User             @relation(fields: [userId], references: [id])
  userId          String
  amount          Float
  currency        String           @default("USD")
  type            TransactionType
  status          TransactionStatus @default(PENDING)
  description     String?
  order           Order?           @relation(fields: [orderId], references: [id])
  orderId         String?
  paymentMethod   PaymentMethod
  transactionId   String?          // External payment processor ID
  accountLast4    String?
  provider        String?
  fees            Float            @default(0)
  processedAt     DateTime?
  createdAt       DateTime         @default(now())

  @@index([userId])
  @@index([type])
  @@index([status])
}

// Transaction type enum
enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  EARNING
  REFUND
  FEE
}

// Transaction status enum
enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

// Payment method enum
enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  BANK_TRANSFER
  WALLET
  SYSTEM
}

// Notification Model
model Notification {
  id          String           @id @default(cuid())
  recipient   User             @relation(fields: [recipientId], references: [id], onDelete: Cascade)
  recipientId String
  type        NotificationType
  title       String
  content     String           @db.Text
  
  // Referenced entities
  orderId     String?
  gigId       String?
  userId      String?
  messageId   String?
  reviewId    String?
  
  isRead      Boolean          @default(false)
  readAt      DateTime?
  createdAt   DateTime         @default(now())

  @@index([recipientId])
  @@index([type])
  @@index([isRead])
}

// Notification type enum
enum NotificationType {
  NEW_MESSAGE
  NEW_ORDER
  ORDER_STATUS_CHANGE
  ORDER_DELIVERED
  ORDER_COMPLETED
  NEW_REVIEW
  PAYMENT_RECEIVED
  WITHDRAWAL_PROCESSED
  SYSTEM_ALERT
}

// Report Model
model Report {
  id             String       @id @default(cuid())
  reporter       User         @relation("ReportSubmitter", fields: [reporterId], references: [id])
  reporterId     String
  
  // Reported content (only one of these will be set)
  reportedUser   User?        @relation("ReportedUser", fields: [reportedUserId], references: [id])
  reportedUserId String?
  reportedGig    Gig?         @relation("ReportedGig", fields: [reportedGigId], references: [id])
  reportedGigId  String?
  reportedReview Review?      @relation("ReportedReview", fields: [reportedReviewId], references: [id])
  reportedReviewId String?
  reportedMessage Message?    @relation("ReportedMessage", fields: [reportedMessageId], references: [id])
  reportedMessageId String?
  
  reason         ReportReason
  description    String       @db.Text
  evidence       String[]
  status         ReportStatus @default(PENDING)
  adminNotes     String?      @db.Text
  actionTaken    String?
  resolvedBy     User?        @relation("ReportResolver", fields: [resolvedById], references: [id])
  resolvedById   String?
  resolvedAt     DateTime?
  createdAt      DateTime     @default(now())

  @@index([status])
}

// Report reason enum
enum ReportReason {
  SPAM
  INAPPROPRIATE_CONTENT
  FAKE
  MISLEADING
  COPYRIGHT
  FRAUD
  HARASSMENT
  OTHER
}

// Report status enum
enum ReportStatus {
  PENDING
  INVESTIGATING
  RESOLVED
  DISMISSED
}

// RefreshToken Model
model RefreshToken {
  id              String    @id @default(cuid())
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  token           String    @unique
  expires         DateTime
  createdByIp     String?
  revoked         DateTime?
  revokedByIp     String?
  replacedByToken String?
  createdAt       DateTime  @default(now())

  @@index([userId])
  @@index([token])
}