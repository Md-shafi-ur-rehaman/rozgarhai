// This is your Prisma schema file
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(FREELANCER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Profile relations based on role
  freelancerProfile FreelancerProfile?
  clientProfile     ClientProfile?

  // Project relations
  postedProjects Project[] @relation("ClientProjects")
  bids           Bid[]     @relation("FreelancerBids")

  // Contract relations
  clientContracts     Contract[] @relation("ClientContracts")
  freelancerContracts Contract[] @relation("FreelancerContracts")

  // Message relations
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")

  // Review relations
  givenReviews    Review[] @relation("GivenReviews")
  receivedReviews Review[] @relation("ReceivedReviews")

  // Other relations
  notifications    Notification[]
  adminActions     AdminAction[]  @relation("TargetUser")
  performedActions AdminAction[]  @relation("AdminUser")

  // Gig relations
  gigs       Gig[]       @relation("FreelancerGigs")
  gigOrders  GigOrder[]  @relation("ClientGigOrders")
  gigReviews GigReview[] @relation("ClientGigReviews")
}

model FreelancerProfile {
  id          String            @id @default(uuid())
  userId      String            @unique
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String
  experience  Int // Years of experience
  education   String?
  location    String
  languages   String[]
  portfolio   Json? // Array of portfolio items
  skills      FreelancerSkill[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model ClientProfile {
  id          String   @id @default(uuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyName String?
  website     String?
  description String?
  industry    String?
  location    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Skill {
  id          String            @id @default(uuid())
  name        String            @unique
  category    String
  freelancers FreelancerSkill[]
  projects    ProjectSkill[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model FreelancerSkill {
  id              String            @id @default(uuid())
  freelancerId    String
  skillId         String
  freelancer      FreelancerProfile @relation(fields: [freelancerId], references: [id], onDelete: Cascade)
  skill           Skill             @relation(fields: [skillId], references: [id], onDelete: Cascade)
  yearsExperience Int
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@unique([freelancerId, skillId])
}

model Project {
  id           String         @id @default(uuid())
  clientId     String
  client       User           @relation("ClientProjects", fields: [clientId], references: [id])
  title        String
  description  String
  budget       Float
  deadline     DateTime
  status       ProjectStatus  @default(OPEN)
  skills       ProjectSkill[]
  bids         Bid[]
  messages     Message[]
  contract     Contract?
  adminActions AdminAction[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model ProjectSkill {
  id        String   @id @default(uuid())
  projectId String
  skillId   String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  skill     Skill    @relation(fields: [skillId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([projectId, skillId])
}

model Bid {
  id           String    @id @default(uuid())
  projectId    String
  project      Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  freelancerId String
  freelancer   User      @relation("FreelancerBids", fields: [freelancerId], references: [id])
  amount       Float
  duration     Int // Duration in days
  coverLetter  String
  status       BidStatus @default(PENDING)
  contract     Contract?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([projectId, freelancerId])
}

model Contract {
  id           String         @id @default(uuid())
  projectId    String         @unique
  project      Project        @relation(fields: [projectId], references: [id])
  bidId        String         @unique
  bid          Bid            @relation(fields: [bidId], references: [id])
  clientId     String
  client       User           @relation("ClientContracts", fields: [clientId], references: [id])
  freelancerId String
  freelancer   User           @relation("FreelancerContracts", fields: [freelancerId], references: [id])
  terms        String
  amount       Float
  startDate    DateTime
  endDate      DateTime?
  status       ContractStatus @default(ACTIVE)
  payments     Payment[]
  reviews      Review[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Payment {
  id          String        @id @default(uuid())
  contractId  String
  contract    Contract      @relation(fields: [contractId], references: [id])
  amount      Float
  description String
  status      PaymentStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Message {
  id         String   @id @default(uuid())
  senderId   String
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  receiverId String
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  projectId  String?
  project    Project? @relation(fields: [projectId], references: [id])
  content    String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Review {
  id         String   @id @default(uuid())
  contractId String
  contract   Contract @relation(fields: [contractId], references: [id])
  fromUserId String
  fromUser   User     @relation("GivenReviews", fields: [fromUserId], references: [id])
  toUserId   String
  toUser     User     @relation("ReceivedReviews", fields: [toUserId], references: [id])
  rating     Int
  comment    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([contractId, fromUserId, toUserId])
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  user      User             @relation(fields: [userId], references: [id])
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model AdminAction {
  id        String          @id @default(uuid())
  adminId   String
  admin     User            @relation("AdminUser", fields: [adminId], references: [id])
  userId    String?
  user      User?           @relation("TargetUser", fields: [userId], references: [id])
  projectId String?
  project   Project?        @relation(fields: [projectId], references: [id])
  action    AdminActionType
  reason    String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model Gig {
  id           String      @id @default(uuid())
  freelancerId String
  freelancer   User        @relation("FreelancerGigs", fields: [freelancerId], references: [id])
  title        String
  description  String
  price        Float
  deliveryTime Int // Days
  revisions    Int
  category     String
  subcategory  String
  tags         String[]
  images       String[]
  requirements String[]
  status       GigStatus   @default(ACTIVE)
  rating       Float       @default(0)
  reviews      GigReview[]
  orders       GigOrder[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model GigOrder {
  id           String         @id @default(uuid())
  gigId        String
  gig          Gig            @relation(fields: [gigId], references: [id])
  clientId     String
  client       User           @relation("ClientGigOrders", fields: [clientId], references: [id])
  requirements String
  deliveryTime Int // Days
  revisions    Int
  status       GigOrderStatus @default(PENDING)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model GigReview {
  id        String   @id @default(uuid())
  gigId     String
  gig       Gig      @relation(fields: [gigId], references: [id])
  clientId  String
  client    User     @relation("ClientGigReviews", fields: [clientId], references: [id])
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([gigId, clientId])
}

enum Role {
  ADMIN
  CLIENT
  FREELANCER
}

enum ProjectStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum BidStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum ContractStatus {
  ACTIVE
  COMPLETED
  TERMINATED
  DISPUTED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum NotificationType {
  BID_RECEIVED
  BID_ACCEPTED
  CONTRACT_CREATED
  PAYMENT_RECEIVED
  MESSAGE_RECEIVED
  PROJECT_UPDATE
  REVIEW_RECEIVED
  ADMIN_ACTION
}

enum AdminActionType {
  USER_SUSPEND
  USER_ACTIVATE
  PROJECT_REMOVE
  PROJECT_FEATURE
  WARNING_ISSUED
  DISPUTE_RESOLVED
}

enum GigStatus {
  ACTIVE
  PAUSED
  DELETED
}

enum GigOrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
